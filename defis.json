[
    {
      "id": 1,
      "chapitre": "Introduction",
      "niveau": 1,
      "intitule": "Affiche 'Bonjour Professeur Pipithon' dans la console."
    },
    {
      "id": 2,
      "chapitre": "Introduction",
      "niveau": 1,
      "intitule": "Crée une variable qui contient ton prénom, puis affiche-la."
    },
    {
      "id": 3,
      "chapitre": "Introduction",
      "niveau": 1,
      "intitule": "Crée deux variables a et b contenant des nombres. Affiche leur somme."
    },
    {
      "id": 4,
      "chapitre": "Introduction",
      "niveau": 1,
      "intitule": "Crée une variable contenant un âge, puis affiche si la personne est majeure ou non."
    },
    {
      "id": 5,
      "chapitre": "Introduction",
      "niveau": 1,
      "intitule": "Demande à l’utilisateur de saisir son nom (avec input), puis salue-le."
    },
    {
      "id": 6,
      "chapitre": "Introduction",
      "niveau": 1,
      "intitule": "Crée une liste contenant 5 prénoms, puis affiche le 3e prénom."
    },
    {
      "id": 7,
      "chapitre": "Introduction",
      "niveau": 1,
      "intitule": "Crée une fonction qui affiche 'Bienvenue dans l'univers Python'."
    },
    {
      "id": 8,
      "chapitre": "Introduction",
      "niveau": 1,
      "intitule": "Crée une fonction qui retourne le double d’un nombre donné."
    },
    {
      "id": 9,
      "chapitre": "Introduction",
      "niveau": 1,
      "intitule": "Affiche tous les entiers de 1 à 10 avec une boucle."
    },
    {
      "id": 10,
      "chapitre": "Introduction",
      "niveau": 1,
      "intitule": "Crée une fonction qui affiche chaque lettre d’un mot passé en paramètre."
    },
    {
        "id": 11,
        "chapitre": "Introduction",
        "niveau": 1,
        "intitule": "Écris un programme qui affiche un message différent selon l’heure (matin, après-midi, soir)."
      },
      {
        "id": 12,
        "chapitre": "Introduction",
        "niveau": 1,
        "intitule": "Crée un petit programme qui simule un lancer de dé (entre 1 et 6) avec la fonction random."
      },
      {
        "id": 13,
        "chapitre": "Introduction",
        "niveau": 1,
        "intitule": "Écris une fonction qui demande le nom du joueur et retourne un message personnalisé aléatoire."
      },
      {
        "id": 14,
        "chapitre": "Introduction",
        "niveau": 1,
        "intitule": "Demande à l’utilisateur son année de naissance, puis calcule son âge."
      },
      {
        "id": 15,
        "chapitre": "Introduction",
        "niveau": 1,
        "intitule": "Crée une boucle qui affiche tous les multiples de 3 entre 1 et 30."
      },
      
      {
        "id": 16,
        "chapitre": "Introduction",
        "niveau": 1,
        "intitule": "Écris une fonction qui prend un prénom et retourne une phrase du style 'Bienvenue, [prénom] ! Tu es maintenant un élève de Pipithon.'"
      },
      {
        "id": 17,
        "chapitre": "Introduction",
        "niveau": 1,
        "intitule": "Crée un petit script qui génère un nombre aléatoire entre 1 et 100, puis demande au joueur de le deviner (mode devinette)."
      },
      {
        "id": 18,
        "chapitre": "Introduction",
        "niveau": 1,
        "intitule": "Écris une fonction qui prend une phrase et affiche le nombre de caractères qu’elle contient."
      },
      {
        "id": 19,
        "chapitre": "Introduction",
        "niveau": 1,
        "intitule": "Demande à l’utilisateur une température en Celsius, puis affiche-la convertie en Fahrenheit."
      },
      {
        "id": 20,
        "chapitre": "Introduction",
        "niveau": 1,
        "intitule": "Crée un mini programme qui demande un nombre et affiche s’il est positif, négatif ou nul."
      },
      {
        "id": 21,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Écris une fonction qui prend un nombre et retourne True s’il est pair, False sinon."
      },
      {
        "id": 22,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée un programme qui affiche les entiers de 1 à 100 mais remplace les multiples de 3 par 'Fizz', ceux de 5 par 'Buzz', et ceux de 3 et 5 par 'FizzBuzz'."
      },
      {
        "id": 23,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Écris une fonction qui prend une chaîne de caractères et retourne le nombre de voyelles qu’elle contient."
      },
      {
        "id": 24,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée une fonction qui calcule la factorielle d’un nombre donné (sans utiliser de module)."
      },
      {
        "id": 25,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée un programme qui demande un mot à l’utilisateur, puis affiche chaque lettre avec son index."
      },
      {
        "id": 26,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée une fonction qui prend une liste de nombres et retourne la moyenne."
      },
      {
        "id": 27,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Écris une fonction qui retourne le mot le plus long d’une phrase donnée."
      },
      {
        "id": 28,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée une fonction qui prend une chaîne de caractères et retourne cette chaîne inversée."
      },
      {
        "id": 29,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Écris un script qui demande une année à l’utilisateur et lui dit si c’est une année bissextile."
      },
      {
        "id": 30,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée une fonction qui vérifie si un mot est un palindrome (ex: 'radar')."
      },
      {
        "id": 31,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Écris une fonction qui prend une liste et retourne une nouvelle liste sans les doublons."
      },
      {
        "id": 32,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée une fonction qui trie une liste de nombres sans utiliser la fonction sort()."
      },
      {
        "id": 33,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Demande à l’utilisateur une phrase, puis affiche combien de mots elle contient."
      },
      {
        "id": 34,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée un dictionnaire qui associe 5 prénoms à leurs âges, puis affiche le plus jeune."
      },
      {
        "id": 35,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Écris une fonction qui convertit une liste de températures Celsius en Fahrenheit."
      },
      {
        "id": 36,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée une fonction qui affiche tous les mots d’une phrase qui contiennent plus de 5 lettres."
      },
      {
        "id": 37,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Écris un programme qui simule une mini calculatrice : demande deux nombres et une opération (+, -, *, /) et affiche le résultat."
      },
      {
        "id": 38,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée une fonction qui retourne le nombre de fois qu’un caractère donné apparaît dans une chaîne."
      },
      {
        "id": 39,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Écris un programme qui génère une liste de 10 nombres aléatoires entre 1 et 100, puis affiche la valeur max et min."
      },
      {
        "id": 40,
        "chapitre": "Python Basics",
        "niveau": 2,
        "intitule": "Crée une fonction qui calcule la somme des carrés des nombres d’une liste."
      },
      {
        "id": 41,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée un tableau numpy contenant les entiers de 1 à 10."
      },
      {
        "id": 42,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée un tableau de 10 zéros, puis change le cinquième élément en 99."
      },
      {
        "id": 43,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Génère un tableau numpy contenant les multiples de 3 entre 3 et 30."
      },
      {
        "id": 44,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée un tableau aléatoire de 5 entiers entre 10 et 100 à l’aide de `np.random.randint`."
      },
      {
        "id": 45,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Calcule la moyenne, l’écart-type et la somme d’un tableau numpy de ton choix."
      },
      {
        "id": 46,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée deux tableaux numpy de même taille et affiche leur somme élément par élément."
      },
      {
        "id": 47,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Multiplie un tableau numpy par 2 sans utiliser de boucle."
      },
      {
        "id": 48,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée un tableau 3x3 contenant les entiers de 1 à 9, puis affiche sa transposée."
      },
      {
        "id": 49,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Sélectionne uniquement les éléments d’un tableau numpy qui sont supérieurs à 50."
      },
      {
        "id": 50,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée un tableau 4x4 de nombres aléatoires, puis remplace toutes les valeurs supérieures à 0.5 par 1, les autres par 0."
      },
      {
        "id": 51,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée un tableau 1D contenant 12 entiers, puis transforme-le en matrice 3x4 avec reshape()."
      },
      {
        "id": 52,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée un tableau aléatoire de 100 entiers entre 0 et 100, puis affiche uniquement ceux divisibles par 7."
      },
      {
        "id": 53,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Écris une fonction qui prend un tableau numpy et retourne le nombre d’éléments strictement positifs."
      },
      {
        "id": 54,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée une matrice 5x5 avec des valeurs aléatoires entre 0 et 1, puis remplace la diagonale principale par des 1."
      },
      {
        "id": 55,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Génère deux matrices 3x3 et effectue leur produit matriciel avec np.dot()."
      },
      
      {
        "id": 56,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée une matrice 4x4 contenant les entiers de 1 à 16. Affiche la somme de chaque ligne."
      },
      {
        "id": 57,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Écris un script qui génère un tableau de 1000 valeurs aléatoires selon une loi normale. Affiche la moyenne et l’écart-type."
      },
      {
        "id": 58,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Crée un tableau de 10 entiers entre 0 et 9. Incrémente uniquement les éléments pairs de +10."
      },
      {
        "id": 59,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Écris une fonction qui normalise un tableau : transforme tous les éléments pour que la somme vaille 1."
      },
      {
        "id": 60,
        "chapitre": "Vectors & Arrays",
        "niveau": 3,
        "intitule": "Génère une grille de 0 et 1 aléatoires en 10x10, comme un mini damier de présence/absence."
      },
      
      {
        "id": 61,
        "chapitre": "Regular Expressions",
        "niveau": 4,
        "intitule": "Écris une fonction qui vérifie si une chaîne contient uniquement des lettres majuscules."
      },
      {
        "id": 62,
        "chapitre": "Regular Expressions",
        "niveau": 4,
        "intitule": "Écris une fonction qui extrait toutes les adresses email d’un texte donné."
      },
      {
        "id": 63,
        "chapitre": "Regular Expressions",
        "niveau": 4,
        "intitule": "Crée une fonction qui valide un numéro de téléphone français au format 06XXXXXXXX ou 07XXXXXXXX."
      },
      {
        "id": 64,
        "chapitre": "Regular Expressions",
        "niveau": 4,
        "intitule": "Écris une fonction qui extrait toutes les dates au format JJ/MM/AAAA d’un texte."
      },
      {
        "id": 65,
        "chapitre": "Regular Expressions",
        "niveau": 4,
        "intitule": "Crée une fonction qui vérifie si un mot commence et se termine par la même lettre."
      },
      {
        "id": 66,
        "chapitre": "Regular Expressions",
        "niveau": 4,
        "intitule": "Remplace tous les chiffres d’un texte par des étoiles (*)."
      },
      {
        "id": 67,
        "chapitre": "Regular Expressions",
        "niveau": 4,
        "intitule": "Trouve toutes les chaînes de 4 lettres majuscules consécutives dans un texte."
      },
      {
        "id": 68,
        "chapitre": "Regular Expressions",
        "niveau": 4,
        "intitule": "Vérifie si une chaîne contient un mot qui commence par 'py' (ex : python, pyjama...)."
      },
      {
        "id": 69,
        "chapitre": "Regular Expressions",
        "niveau": 4,
        "intitule": "Extrais tous les hashtags d’un texte Twitter."
      },
      {
        "id": 70,
        "chapitre": "Regular Expressions",
        "niveau": 4,
        "intitule": "Remplace tous les mots de plus de 6 lettres dans un texte par '[longmot]'."
      },
      
      {
        "id": 71,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Charge un fichier CSV nommé 'data.csv' dans un DataFrame et affiche les 5 premières lignes."
      },
      {
        "id": 72,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Affiche les noms des colonnes et les types de données du DataFrame chargé."
      },
      {
        "id": 73,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Affiche le nombre de lignes et de colonnes, puis les statistiques descriptives du DataFrame."
      },
      {
        "id": 74,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Filtre le DataFrame pour ne garder que les lignes où la colonne 'age' est supérieure à 30."
      },
      {
        "id": 75,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Crée une nouvelle colonne 'revenu_mensuel' en divisant la colonne 'revenu_annuel' par 12."
      },
      
      {
        "id": 76,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Supprime les lignes contenant des valeurs manquantes dans le DataFrame."
      },
      {
        "id": 77,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Remplace les valeurs manquantes de la colonne 'salaire' par la moyenne de cette colonne."
      },
      {
        "id": 78,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Trie le DataFrame par ordre décroissant de la colonne 'revenu_mensuel'."
      },
      {
        "id": 79,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Affiche la moyenne d’âge par catégorie de la colonne 'profession' (utilise groupby)."
      },
      {
        "id": 80,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Crée un nouveau DataFrame contenant uniquement les colonnes 'nom', 'âge', 'ville'."
      },
      
      {
        "id": 81,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Crée un DataFrame à partir d’un dictionnaire Python contenant les clés 'nom', 'note1', 'note2', puis calcule la moyenne des notes pour chaque ligne."
      },
      {
        "id": 82,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Fusionne deux DataFrames contenant des informations complémentaires sur les employés (utilise pd.merge)."
      },
      {
        "id": 83,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Crée un pivot table qui affiche la moyenne des salaires par ville et par profession."
      },
      {
        "id": 84,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Exporte un DataFrame nettoyé au format CSV sous le nom 'output.csv', sans l’index."
      },
      {
        "id": 85,
        "chapitre": "Pandas",
        "niveau": 5,
        "intitule": "Crée une fonction qui reçoit un DataFrame et retourne un résumé contenant : nombre de colonnes, types, nombre de NaN par colonne."
      },
      
      {
        "id": 86,
        "chapitre": "Visualisation",
        "niveau": 6,
        "intitule": "Crée un graphique en ligne (line plot) représentant l’évolution d’un chiffre d’affaires sur 12 mois avec matplotlib."
      },
      {
        "id": 87,
        "chapitre": "Visualisation",
        "niveau": 6,
        "intitule": "Affiche un histogramme représentant la répartition des âges dans un DataFrame avec seaborn."
      },
      {
        "id": 88,
        "chapitre": "Visualisation",
        "niveau": 6,
        "intitule": "Crée un diagramme en barres comparant les revenus moyens par ville à l’aide de seaborn."
      },
      {
        "id": 89,
        "chapitre": "Visualisation",
        "niveau": 6,
        "intitule": "Trace un nuage de points (scatter plot) montrant la relation entre le revenu et l’âge dans un DataFrame."
      },
      {
        "id": 90,
        "chapitre": "Visualisation",
        "niveau": 6,
        "intitule": "Crée un boxplot avec seaborn pour comparer les notes entre plusieurs groupes (ex: classes ou départements)."
      },
      
      {
        "id": 91,
        "chapitre": "Visualisation",
        "niveau": 6,
        "intitule": "Ajoute un titre, un label X et un label Y à un graphique matplotlib, puis enregistre-le en image PNG."
      },
      {
        "id": 92,
        "chapitre": "Visualisation",
        "niveau": 6,
        "intitule": "Crée une courbe avec deux séries de données différentes (ex: dépenses et revenus), en deux couleurs, sur le même graphique."
      },
      {
        "id": 93,
        "chapitre": "Visualisation",
        "niveau": 6,
        "intitule": "Utilise seaborn pour tracer une heatmap représentant une matrice de corrélation entre plusieurs variables numériques."
      },
      {
        "id": 94,
        "chapitre": "Visualisation",
        "niveau": 6,
        "intitule": "Personnalise les couleurs, les tailles de points et les formes dans un scatterplot avec seaborn."
      },
      {
        "id": 95,
        "chapitre": "Visualisation",
        "niveau": 6,
        "intitule": "Crée un graphique interactif avec plotly express pour afficher une évolution temporelle (optionnel bonus si plotly est installé)."
      },
      
      {
        "id": 96,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Réécris une fonction mal indentée pour qu’elle respecte les conventions PEP8 (indentation, noms, etc.)."
      },
      {
        "id": 97,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Crée une fonction bien documentée avec une docstring en format PEP257 expliquant ses paramètres et son retour."
      },
      {
        "id": 98,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Ajoute des blocs try/except dans un code pour gérer les erreurs de division par zéro et d’entrée invalide."
      },
      {
        "id": 99,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Transforme un script plat en un programme modulaire avec des fonctions claires et un bloc `if __name__ == '__main__':`."
      },
      {
        "id": 100,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Crée un fichier de configuration `config.json` ou `.env`, et écris une fonction pour en lire les valeurs proprement."
      },
      
      {
        "id": 101,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Écris un script avec des commentaires utiles qui expliquent chaque étape du raisonnement."
      },
      {
        "id": 102,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Renomme des variables mal nommées pour qu’elles soient explicites, lisibles et conformes aux conventions Python."
      },
      {
        "id": 103,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Crée un exemple de test unitaire simple avec `assert` pour vérifier qu'une fonction retourne le bon résultat."
      },
      {
        "id": 104,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Utilise `type hints` dans une fonction pour spécifier les types d’entrée et de sortie."
      },
      {
        "id": 105,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Écris une fonction réutilisable pour nettoyer une liste de chaînes (trim, minuscule, suppression des caractères spéciaux)."
      },
      
      {
        "id": 106,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Ajoute des logs dans un script avec le module `logging` pour suivre l’exécution du programme."
      },
      {
        "id": 107,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Transforme un script de 50 lignes en un code clair avec fonctions, commentaires et gestion d’erreurs."
      },
      {
        "id": 108,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Organise un petit projet en plusieurs fichiers (ex: `main.py`, `utils.py`, `config.json`)."
      },
      {
        "id": 109,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Écris une classe Python bien structurée avec un constructeur, une méthode, et un attribut privé."
      },
      {
        "id": 110,
        "chapitre": "Best Practices",
        "niveau": 7,
        "intitule": "Propose une checklist personnelle des 5 meilleures bonnes pratiques que tu veux toujours appliquer dans ton code."
      },
      
      {
        "id": 111,
        "chapitre": "Efficient Programming",
        "niveau": 8,
        "intitule": "Transforme une boucle `for` qui double chaque élément d’une liste en une list comprehension équivalente."
      },
      {
        "id": 112,
        "chapitre": "Efficient Programming",
        "niveau": 8,
        "intitule": "Chronomètre l’exécution d’un script avec le module `time` et affiche le temps d’exécution."
      },
      {
        "id": 113,
        "chapitre": "Efficient Programming",
        "niveau": 8,
        "intitule": "Compare deux versions d’un code (boucle vs list comprehension) et mesure leur temps d’exécution."
      },
      {
        "id": 114,
        "chapitre": "Efficient Programming",
        "niveau": 8,
        "intitule": "Écris une fonction qui utilise `map()` pour convertir une liste de températures Celsius en Fahrenheit."
      },
      {
        "id": 115,
        "chapitre": "Efficient Programming",
        "niveau": 8,
        "intitule": "Utilise `zip()` pour fusionner deux listes (`noms`, `notes`) en une liste de tuples, sans boucle."
      },
      
      {
        "id": 116,
        "chapitre": "Efficient Programming",
        "niveau": 8,
        "intitule": "Crée une version vectorisée avec Numpy d’une fonction qui calcule les carrés d’une liste de nombres."
      },
      {
        "id": 117,
        "chapitre": "Efficient Programming",
        "niveau": 8,
        "intitule": "Écris une fonction qui trie une grande liste d’entiers aléatoires et mesure le temps de tri avec `timeit`."
      },
      {
        "id": 118,
        "chapitre": "Efficient Programming",
        "niveau": 8,
        "intitule": "Évite la répétition de code dans un script en créant une fonction réutilisable."
      },
      {
        "id": 119,
        "chapitre": "Efficient Programming",
        "niveau": 8,
        "intitule": "Utilise `set()` pour détecter les doublons dans une grande liste et améliorer la vitesse d’exécution."
      },
      {
        "id": 120,
        "chapitre": "Efficient Programming",
        "niveau": 8,
        "intitule": "Écris une version paresseuse (lazy) d’une fonction avec un générateur (`yield`) pour traiter une grande quantité de données ligne par ligne."
      },
      
      {
        "id": 121,
        "chapitre": "API & Web Scraping",
        "niveau": 9,
        "intitule": "Fais une requête GET vers 'https://api.chucknorris.io/jokes/random' et affiche la blague retournée."
      },
      {
        "id": 122,
        "chapitre": "API & Web Scraping",
        "niveau": 9,
        "intitule": "Récupère les données météo de la ville de Paris via une API publique (OpenWeatherMap ou autre)."
      },
      {
        "id": 123,
        "chapitre": "API & Web Scraping",
        "niveau": 9,
        "intitule": "Envoie une requête HTTP vers un site web et affiche le code de statut de la réponse (200, 404, etc)."
      },
      {
        "id": 124,
        "chapitre": "API & Web Scraping",
        "niveau": 9,
        "intitule": "Utilise BeautifulSoup pour extraire tous les liens (`<a href>`) de la page d’accueil de Wikipédia."
      },
      {
        "id": 125,
        "chapitre": "API & Web Scraping",
        "niveau": 9,
        "intitule": "Crée une fonction qui récupère le titre (`<title>`) de n’importe quelle page web passée en paramètre."
      },
      
      {
        "id": 126,
        "chapitre": "API & Web Scraping",
        "niveau": 9,
        "intitule": "Affiche les en-têtes (headers) d’une réponse HTTP récupérée via `requests.get()`."
      },
      {
        "id": 127,
        "chapitre": "API & Web Scraping",
        "niveau": 9,
        "intitule": "Crée un programme qui envoie une requête GET à une API et extrait une information précise du fichier JSON retourné."
      },
      {
        "id": 128,
        "chapitre": "API & Web Scraping",
        "niveau": 9,
        "intitule": "Scrape une table HTML depuis un site web en utilisant `pandas.read_html()`."
      },
      {
        "id": 129,
        "chapitre": "API & Web Scraping",
        "niveau": 9,
        "intitule": "Crée une fonction qui récupère les titres des actualités d’une page web d’info (ex: Le Monde, France Info…)."
      },
      {
        "id": 130,
        "chapitre": "API & Web Scraping",
        "niveau": 9,
        "intitule": "Écris un script qui télécharge toutes les images d’une page web donnée (balises `<img>` avec BeautifulSoup)."
      },
      
      {
        "id": 131,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Charge un dataset intégré de scikit-learn (ex: iris) et affiche les premières observations."
      },
      {
        "id": 132,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Divise un dataset en variables explicatives (X) et variable cible (y)."
      },
      {
        "id": 133,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Utilise `train_test_split` pour diviser les données en un ensemble d’entraînement et de test (70/30)."
      },
      {
        "id": 134,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Entraîne un modèle de régression linéaire avec `LinearRegression` et affiche les coefficients."
      },
      {
        "id": 135,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Fais une prédiction avec ton modèle sur l’ensemble de test, puis affiche l’erreur quadratique moyenne (MSE)."
      },
      
      {
        "id": 136,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Entraîne un modèle de classification `LogisticRegression` sur le jeu de données iris."
      },
      {
        "id": 137,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Évalue les performances du modèle avec une matrice de confusion et la précision (`accuracy_score`)."
      },
      {
        "id": 138,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Teste un modèle d’arbre de décision (`DecisionTreeClassifier`) et compare ses performances à la régression logistique."
      },
      {
        "id": 139,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Affiche un graphe de l’arbre de décision entraîné avec `plot_tree` ou `graphviz`."
      },
      {
        "id": 140,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Utilise `StandardScaler` pour normaliser les données avant l'entraînement, puis compare les résultats."
      },
      
      {
        "id": 141,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Teste un modèle `KNeighborsClassifier` avec différents nombres de voisins (k = 3, 5, 10) et compare la précision."
      },
      {
        "id": 142,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Utilise `cross_val_score` pour évaluer la stabilité d’un modèle avec une validation croisée à 5 plis."
      },
      {
        "id": 143,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Entraîne un modèle `RandomForestClassifier` sur un dataset et affiche l’importance des variables."
      },
      {
        "id": 144,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Crée une fonction qui automatise l'entraînement, la prédiction et l’évaluation d’un modèle sklearn donné."
      },
      {
        "id": 145,
        "chapitre": "Machine Learning",
        "niveau": 10,
        "intitule": "Compare plusieurs modèles (`LogisticRegression`, `KNN`, `RandomForest`) sur un même jeu de données et affiche un tableau récapitulatif des scores."
      },
      
      {
        "id": 146,
        "chapitre": "Deep Learning",
        "niveau": 11,
        "intitule": "Charge le dataset `mnist` depuis `tensorflow.keras.datasets` et affiche une image aléatoire avec son label."
      },
      {
        "id": 147,
        "chapitre": "Deep Learning",
        "niveau": 11,
        "intitule": "Normalise les images MNIST entre 0 et 1, puis sépare les données en X_train, y_train, X_test, y_test."
      },
      {
        "id": 148,
        "chapitre": "Deep Learning",
        "niveau": 11,
        "intitule": "Crée un modèle séquentiel Keras avec une couche Dense de 128 neurones + relu et une couche de sortie softmax (10 classes)."
      },
      {
        "id": 149,
        "chapitre": "Deep Learning",
        "niveau": 11,
        "intitule": "Compile le modèle avec l’optimiseur 'adam', la perte 'sparse_categorical_crossentropy' et la métrique 'accuracy'."
      },
      {
        "id": 150,
        "chapitre": "Deep Learning",
        "niveau": 11,
        "intitule": "Entraîne ton modèle sur MNIST pendant 5 époques, puis évalue la précision sur le test set."
      },
      
      {
        "id": 151,
        "chapitre": "Deep Learning",
        "niveau": 11,
        "intitule": "Affiche l’évolution de la précision et de la perte pendant l'entraînement avec `matplotlib` (history.history)."
      },
      {
        "id": 152,
        "chapitre": "Deep Learning",
        "niveau": 11,
        "intitule": "Affiche une prédiction du modèle sur une image de test : image + label prédit + vrai label."
      },
      {
        "id": 153,
        "chapitre": "Deep Learning",
        "niveau": 11,
        "intitule": "Ajoute une couche de régularisation `Dropout(0.2)` à ton modèle et observe l’impact sur la validation."
      },
      {
        "id": 154,
        "chapitre": "Deep Learning",
        "niveau": 11,
        "intitule": "Sauvegarde ton modèle entraîné au format `.h5` puis recharge-le pour faire une prédiction."
      },
      {
        "id": 155,
        "chapitre": "Deep Learning",
        "niveau": 11,
        "intitule": "Teste un autre dataset simple (comme `fashion_mnist`) et adapte ton architecture pour classifier les vêtements."
      }
      
  ]
  