{
  "cours": [
    {
      "chapitre": "Introduction",
      "niveau": 1,
      "titre": "Premiers pas avec Python",
      "sections": [
        {
          "titre": "Qu'est-ce que Python ?",
          "contenu": "Python est un langage de programmation simple, lisible, et très utilisé en science des données, intelligence artificielle, web, automatisation, etc. Il est souvent recommandé aux débutants pour sa syntaxe claire.",
          "code_exemple": ""
        },
        {
          "titre": "Afficher un message",
          "contenu": "Pour afficher un texte dans la console, on utilise la fonction `print()`.",
          "code_exemple": "print('Bonjour Professeur Pipithon !')"
        },
        {
          "titre": "Variables simples",
          "contenu": "Une variable permet de stocker une valeur. On n’a pas besoin de spécifier le type : Python le devine automatiquement.",
          "code_exemple": "prenom = 'Mehdi'\\nage = 30"
        },
        {
          "titre": "Faire une addition",
          "contenu": "On peut faire des opérations mathématiques simples : addition, soustraction, multiplication, etc.",
          "code_exemple": "a = 5\\nb = 3\\nsomme = a + b\\nprint(somme)"
        },
        {
          "titre": "Les commentaires",
          "contenu": "Un commentaire permet d’expliquer ce que fait le code. Il n’est pas exécuté. On le crée avec `#`.",
          "code_exemple": "# Ceci est un commentaire"
        }
      ],
      "qcm": [
        {
          "question": "Que fait la commande `print('Bonjour')` ?",
          "choix": ["Elle enregistre du texte", "Elle affiche du texte", "Elle supprime du texte", "Elle ferme le programme"],
          "reponse": "Elle affiche du texte"
        },
        {
          "question": "Quelle syntaxe est correcte pour créer une variable ?",
          "choix": ["let x = 5", "x == 5", "x = 5", "int x = 5"],
          "reponse": "x = 5"
        },
        {
          "question": "Que signifie `#` dans un programme Python ?",
          "choix": ["Un bug", "Un message d’erreur", "Un commentaire", "Une boucle"],
          "reponse": "Un commentaire"
        }
      ],
      "resume": ""
    },

    {
      "chapitre": "Python Basics",
      "niveau": 2,
      "titre": "Bases de Python : variables, types, boucles, conditions",
      "sections": [
        {
          "titre": "Variables et Types",
          "contenu": "En Python, une variable est un nom associé à une valeur. Les types de base sont int (entiers), float (décimaux), str (chaînes de caractères) et bool (vrai/faux)...",
          "code_exemple": "age = 25\\nnom = 'Alice'\\nsolde = 32.5\\nest_majeur = True"
        },
        {
          "titre": "Les conditions",
          "contenu": "Les structures conditionnelles permettent d’exécuter du code selon une condition. On utilise `if`, `elif`, `else`.",
          "code_exemple": "if age >= 18:\\n    print('Majeur')\\nelse:\\n    print('Mineur')"
        },
        {
          "titre": "Les boucles",
          "contenu": "Les boucles `for` et `while` permettent de répéter une action. `for` est souvent utilisé pour parcourir une séquence.",
          "code_exemple": "for i in range(5):\\n    print(i)\\n\\nwhile age < 30:\\n    age += 1"
        },
        {
          "titre": "Les fonctions",
          "contenu": "Une fonction est un bloc de code réutilisable. On la définit avec `def`.",
          "code_exemple": "def saluer(nom):\\n    print(f'Bonjour {nom}')"
        }
      ],
      "qcm": [
        {
          "question": "Quel est le type de la variable : `x = '42'` ?",
          "choix": ["int", "str", "float", "bool"],
          "reponse": "str"
        },
        {
          "question": "Quelle syntaxe est correcte pour une fonction ?",
          "choix": ["function saluer():", "def saluer():", "fun saluer():", "create function saluer():"],
          "reponse": "def saluer():"
        },
        {
          "question": "Quel mot-clé permet de répéter une action tant qu’une condition est vraie ?",
          "choix": ["if", "for", "repeat", "while"],
          "reponse": "while"
        }
      ],
      "resume": ""
    },

    {
      "chapitre": "Vectors & Arrays",
      "niveau": 3,
      "titre": "Manipuler efficacement les tableaux avec NumPy",
      "sections": [
        {
          "titre": "Pourquoi utiliser NumPy ?",
          "contenu": "NumPy est une bibliothèque efficace pour manipuler des données numériques. Elle permet des calculs rapides grâce aux tableaux (arrays) multidimensionnels et aux opérations vectorisées.",
          "code_exemple": ""
        },
        {
          "titre": "Créer des tableaux",
          "contenu": "On peut créer des tableaux à partir de listes, ou en générant automatiquement les valeurs :",
          "code_exemple": "np.array([1, 2, 3])\\nnp.zeros(5)\\nnp.ones((2, 3))\\nnp.arange(0, 10, 2)\\nnp.linspace(0, 1, 5)"
        },
        {
          "titre": "Accès aux éléments et slicing",
          "contenu": "Comme les listes, les tableaux permettent un accès direct aux éléments ou à des tranches.",
          "code_exemple": "a[0]  # premier élément\\na[-1]  # dernier élément\\na[1:3]  # slicing"
        },
        {
          "titre": "Propriétés des tableaux",
          "contenu": "On peut consulter la forme, le type ou le nombre d’éléments d’un tableau :",
          "code_exemple": "a.shape  # (3,)\\na.ndim  # 1 dimension\\na.size  # 3 éléments\\na.dtype  # type des données"
        },
        {
          "titre": "Opérations vectorisées",
          "contenu": "Les opérations mathématiques s’appliquent directement sur tous les éléments sans boucle :",
          "code_exemple": "a + 1\\na * 2\\na ** 2\\nnp.sqrt(a)"
        },
        {
          "titre": "Fonctions utiles",
          "contenu": "NumPy fournit des fonctions pratiques pour calculer des statistiques rapidement :",
          "code_exemple": "np.sum(a)\\nnp.mean(a)\\nnp.std(a)\\na.min()\\na.max()\\nnp.sort(a)"
        },
        {
          "titre": "Modifier la forme des tableaux",
          "contenu": "On peut changer la forme ou combiner plusieurs tableaux avec différentes fonctions :",
          "code_exemple": "a.reshape((2, 3))\\na.T  # transposée\\nnp.concatenate([a, b])\\nnp.vstack((a, b))\\nnp.hstack((a, b))"
        },
        {
          "titre": "Produit matriciel",
          "contenu": "NumPy permet de faire des produits matriciels avec `np.dot()` ou l'opérateur `@`.",
          "code_exemple": "np.dot(A, B)\\nA @ B"
        }
      ],
      "qcm": [
        {
          "question": "Quelle fonction de NumPy permet de créer une séquence entière régulière ?",
          "choix": ["np.array()", "np.arange()", "np.linspace()", "np.sequence()"],
          "reponse": "np.arange()"
        },
        {
          "question": "Quelle méthode permet d'obtenir le nombre total d'éléments d'un tableau NumPy ?",
          "choix": ["arr.length", "arr.count()", "arr.size", "len(arr)"],
          "reponse": "arr.size"
        },
        {
          "question": "Comment empiler deux tableaux verticalement ?",
          "choix": ["np.vstack((a, b))", "np.hstack((a, b))", "np.stack((a, b), axis=1)", "np.append(a, b)"],
          "reponse": "np.vstack((a, b))"
        }
      ],
      "resume": ""
    },

    {
      "chapitre": "Regular Expressions",
      "niveau": 4,
      "titre": "Rechercher et manipuler du texte avec les regex",
      "sections": [
        {
          "titre": "Qu’est-ce qu’une expression régulière ?",
          "contenu": "Une expression régulière (regex) est une chaîne de caractères utilisée pour décrire un motif de texte. En Python, on utilise le module `re` pour travailler avec les regex.",
          "code_exemple": "import re"
        },
        {
          "titre": "Fonctions principales du module `re`",
          "contenu": "- `re.search()` : cherche un motif dans une chaîne (renvoie un match ou None).\\n- `re.match()` : teste si le motif est au début de la chaîne.\\n- `re.findall()` : retourne toutes les occurrences du motif sous forme de liste.\\n- `re.sub()` : remplace un motif par une chaîne.",
          "code_exemple": "re.search('a', 'chat')\\nre.findall(r'\\\\d+', 'Il a 3 chats et 12 poissons')"
        },
        {
          "titre": "Les métacaractères",
          "contenu": "Les regex utilisent des caractères spéciaux pour créer des motifs :\\n- `.` : n’importe quel caractère sauf retour ligne\\n- `^` : début de chaîne\\n- `$` : fin de chaîne\\n- `*` : 0 ou plusieurs fois\\n- `+` : 1 ou plusieurs fois\\n- `?` : 0 ou 1 fois\\n- `[]` : ensemble de caractères",
          "code_exemple": "re.findall(r'^[A-Z].+', 'Python')"
        },
        {
          "titre": "Groupes et quantificateurs",
          "contenu": "On peut regrouper des motifs avec des parenthèses `()` et appliquer des quantificateurs :\\n- `(abc)*` : zéro ou plusieurs fois abc\\n- `(\\\\d{3})` : groupe de 3 chiffres\\n- `|` : OU logique entre motifs",
          "code_exemple": "re.findall(r'(ab)+', 'ababab')"
        },
        {
          "titre": "Classes de caractères",
          "contenu": "- `\\\\d` : chiffre (0-9)\\n- `\\\\w` : lettre ou chiffre\\n- `\\\\s` : espace\\n- `\\\\b` : frontière de mot\\n- `\\\\D`, `\\\\W`, `\\\\S` : négations",
          "code_exemple": "re.findall(r'\\\\b\\\\w+\\\\b', 'Voici une phrase entière.')"
        }
      ],
      "qcm": [
        {
          "question": "Quelle fonction retourne toutes les correspondances dans une chaîne ?",
          "choix": ["re.match()", "re.find()", "re.findall()", "re.search()"],
          "reponse": "re.findall()"
        },
        {
          "question": "Quel motif permet de trouver un mot qui commence par une majuscule ?",
          "choix": ["^[A-Z]\\\\w*", "\\\\w+[A-Z]$", "[A-Z]+", "\\\\d[A-Z]"],
          "reponse": "^[A-Z]\\\\w*"
        },
        {
          "question": "Que signifie `\\\\d` dans une expression régulière ?",
          "choix": ["Un mot", "Un chiffre", "Un espace", "Une majuscule"],
          "reponse": "Un chiffre"
        }
      ],
      "resume": ""
    },

    {
      "chapitre": "Pandas",
      "niveau": 5,
      "titre": "Manipulation de données tabulaires avec Pandas",
      "sections": [
        {
          "titre": "Qu’est-ce que Pandas ?",
          "contenu": "Pandas est une bibliothèque Python utilisée pour manipuler des données sous forme de tableaux (DataFrames). Elle permet de charger, transformer, analyser et exporter facilement des données tabulaires.",
          "code_exemple": "import pandas as pd"
        },
        {
          "titre": "Créer un DataFrame",
          "contenu": "On peut créer un DataFrame à partir d’un dictionnaire ou d’un fichier CSV.",
          "code_exemple": "df = pd.DataFrame({\\n    'nom': ['Alice', 'Bob'],\\n    'âge': [25, 30]\\n})"
        },
        {
          "titre": "Charger des données",
          "contenu": "Pandas permet de lire différents formats de fichiers :",
          "code_exemple": "pd.read_csv('data.csv')\\npd.read_excel('fichier.xlsx')\\npd.read_html('site.html')"
        },
        {
          "titre": "Explorer un DataFrame",
          "contenu": "On peut rapidement explorer la structure et les statistiques descriptives d’un DataFrame :",
          "code_exemple": "df.head()\\ndf.info()\\ndf.describe()"
        },
        {
          "titre": "Filtrer et sélectionner des données",
          "contenu": "Pandas permet de filtrer les lignes selon des conditions logiques :",
          "code_exemple": "df[df['âge'] > 25]\\ndf.loc[0]\\ndf['nom']"
        },
        {
          "titre": "Modifier les données",
          "contenu": "On peut ajouter ou supprimer des colonnes, gérer les valeurs manquantes, etc.",
          "code_exemple": "df['ville'] = ['Paris', 'Lyon']\\ndf.drop('ville', axis=1, inplace=True)\\ndf.fillna(0)"
        },
        {
          "titre": "GroupBy et agrégation",
          "contenu": "Permet de regrouper les données et d'appliquer des fonctions statistiques.",
          "code_exemple": "df.groupby('nom').mean()\\ndf.groupby('nom').agg({'âge': 'max'})"
        },
        {
          "titre": "Exporter un DataFrame",
          "contenu": "On peut exporter les données vers différents formats.",
          "code_exemple": "df.to_csv('nouveau.csv', index=False)"
        }
      ],
      "qcm": [
        {
          "question": "Quelle fonction affiche les premières lignes d’un DataFrame ?",
          "choix": ["df.first()", "df.top()", "df.head()", "df.preview()"],
          "reponse": "df.head()"
        },
        {
          "question": "Comment filtre-t-on les lignes où la colonne âge est > 30 ?",
          "choix": ["df.age > 30", "df['âge'] > 30", "df[df['âge'] > 30]", "df.select(âge > 30)"],
          "reponse": "df[df['âge'] > 30]"
        },
        {
          "question": "Quelle méthode permet de regrouper des lignes selon une colonne ?",
          "choix": ["df.join()", "df.groupby()", "df.agg()", "df.select()"],
          "reponse": "df.groupby()"
        }
      ],
      "resume": ""
    },

    {
      "chapitre": "Visualisation",
      "niveau": 6,
      "titre": "Visualiser les données avec Matplotlib et Seaborn",
      "sections": [
        {
          "titre": "Pourquoi faire de la visualisation de données ?",
          "contenu": "La visualisation permet de mieux comprendre les données, de détecter des tendances, des anomalies et de communiquer efficacement les résultats. Elle est essentielle en data science.",
          "code_exemple": ""
        },
        {
          "titre": "Bibliothèques de visualisation",
          "contenu": "En Python, les principales bibliothèques pour créer des graphiques sont :\\n- `matplotlib` : basique mais très complet.\\n- `seaborn` : basé sur matplotlib, plus esthétique et simple.\\n- `plotly` : interactif, pour le web.",
          "code_exemple": "import matplotlib.pyplot as plt\\nimport seaborn as sns"
        },
        {
          "titre": "Tracer un graphique simple avec Matplotlib",
          "contenu": "Matplotlib permet de créer rapidement des courbes, barres, etc.",
          "code_exemple": "x = [1, 2, 3, 4]\\ny = [10, 20, 25, 30]\\nplt.plot(x, y)\\nplt.title('Exemple')\\nplt.show()"
        },
        {
          "titre": "Graphiques avec Seaborn",
          "contenu": "Seaborn permet de créer des graphiques statistiques facilement à partir d’un DataFrame.",
          "code_exemple": "import seaborn as sns\\nsns.barplot(x='jour', y='ventes', data=df)\\nsns.boxplot(x='categorie', y='score', data=df)"
        },
        {
          "titre": "Personnalisation des graphiques",
          "contenu": "On peut modifier le titre, les axes, les couleurs, etc.",
          "code_exemple": "plt.title('Titre')\\nplt.xlabel('X')\\nplt.ylabel('Y')\\nplt.legend(['Courbe 1'])"
        },
        {
          "titre": "Sauvegarder une figure",
          "contenu": "Matplotlib permet d’enregistrer les graphiques dans un fichier image.",
          "code_exemple": "plt.savefig('mon_graphique.png')"
        }
      ],
      "qcm": [
        {
          "question": "Quelle bibliothèque est la plus basique pour faire des graphiques en Python ?",
          "choix": ["seaborn", "pandas", "matplotlib", "plotly"],
          "reponse": "matplotlib"
        },
        {
          "question": "Que fait la commande `plt.show()` ?",
          "choix": ["Elle trace une droite", "Elle sauvegarde la figure", "Elle affiche le graphique", "Elle efface la figure"],
          "reponse": "Elle affiche le graphique"
        },
        {
          "question": "Quelle commande Seaborn permet d’afficher une boîte à moustaches ?",
          "choix": ["sns.histplot()", "sns.barplot()", "sns.lineplot()", "sns.boxplot()"],
          "reponse": "sns.boxplot()"
        }
      ],
      "resume": ""
    },

    {
      "chapitre": "Best Practices",
      "niveau": 7,
      "titre": "Écrire un code Python propre et maintenable",
      "sections": [
        {
          "titre": "Pourquoi appliquer des bonnes pratiques ?",
          "contenu": "Les bonnes pratiques en programmation permettent d’écrire un code lisible, maintenable, réutilisable et moins sujet aux erreurs. Elles sont essentielles dans un travail en équipe et en production.",
          "code_exemple": ""
        },
        {
          "titre": "Lisibilité et convention PEP8",
          "contenu": "PEP8 est le guide de style pour Python. Il recommande notamment :\\n- des noms de variables clairs (snake_case),\\n- une indentation cohérente (4 espaces),\\n- des lignes ≤ 79 caractères.",
          "code_exemple": "nombre_utilisateur = 5\\nif nombre_utilisateur > 0:\\n    print('OK')"
        },
        {
          "titre": "Commentaires et documentation",
          "contenu": "Il est important de commenter le code pour expliquer ce qu’il fait et d’utiliser des docstrings pour les fonctions.",
          "code_exemple": "def addition(a, b):\\n    \"\"\"Retourne la somme de a et b\"\"\"\\n    return a + b"
        },
        {
          "titre": "Modularité et réutilisabilité",
          "contenu": "Un bon programme est divisé en fonctions claires et modules spécialisés. Cela facilite les tests et la maintenance.",
          "code_exemple": "def charger_donnees():\\n    pass\\n\\nif __name__ == '__main__':\\n    charger_donnees()"
        },
        {
          "titre": "Gestion des erreurs",
          "contenu": "Il est recommandé d’anticiper les erreurs avec des blocs `try/except` pour éviter que le programme plante.",
          "code_exemple": "try:\\n    x = 10 / 0\\nexcept ZeroDivisionError:\\n    print('Division par zéro !')"
        },
        {
          "titre": "Tests et vérifications",
          "contenu": "On peut vérifier le bon fonctionnement du code avec `assert` ou utiliser des outils comme `unittest`, `pytest` pour des tests automatisés.",
          "code_exemple": "def carre(x):\\n    return x * x\\n\\nassert carre(2) == 4"
        },
        {
          "titre": "Logging vs print()",
          "contenu": "Pour suivre l'exécution d’un programme, il vaut mieux utiliser `logging` plutôt que `print()`.",
          "code_exemple": "import logging\\nlogging.basicConfig(level=logging.INFO)\\nlogging.info('Début du programme')"
        }
      ],
      "qcm": [
        {
          "question": "Quelle convention est recommandée pour nommer les variables en Python ?",
          "choix": ["camelCase", "snake_case", "PascalCase", "kebab-case"],
          "reponse": "snake_case"
        },
        {
          "question": "Pourquoi utiliser des blocs try/except ?",
          "choix": ["Pour accélérer le code", "Pour commenter une erreur", "Pour ignorer les erreurs sans planter", "Pour créer une fonction"],
          "reponse": "Pour ignorer les erreurs sans planter"
        },
        {
          "question": "Quel module permet de faire du logging dans un script Python ?",
          "choix": ["trace", "log", "debug", "logging"],
          "reponse": "logging"
        }
      ],
      "resume": ""
    },

    {
      "chapitre": "Efficient Programming",
      "niveau": 8,
      "titre": "Optimiser la vitesse et la mémoire de son code",
      "sections": [
        {
          "titre": "Pourquoi optimiser son code ?",
          "contenu": "Optimiser un programme permet de le rendre plus rapide, plus économe en mémoire, et plus adapté à des jeux de données importants. Cela améliore les performances globales d’un projet.",
          "code_exemple": ""
        },
        {
          "titre": "Éviter les boucles inutiles",
          "contenu": "En Python, il est souvent plus efficace d’utiliser des compréhensions de listes ou des opérations vectorisées plutôt que des boucles.",
          "code_exemple": "# Boucle lente\\ncarres = []\\nfor x in range(1000):\\n    carres.append(x * x)\\n\\n# Version optimisée\\ncarres = [x * x for x in range(1000)]"
        },
        {
          "titre": "Utiliser NumPy pour les calculs",
          "contenu": "NumPy permet de traiter rapidement des tableaux sans boucles grâce au traitement vectorisé.",
          "code_exemple": "import numpy as np\\na = np.arange(1000000)\\nb = a * 2"
        },
        {
          "titre": "Mesurer le temps d’exécution",
          "contenu": "Pour comparer les performances, on peut mesurer le temps d’exécution d’un bloc de code.",
          "code_exemple": "import time\\nstart = time.time()\\n# ... code ...\\nend = time.time()\\nprint(f'Temps écoulé : {end - start:.4f} s')"
        },
        {
          "titre": "Profilage et débogage",
          "contenu": "Python dispose d'outils pour mesurer les performances et identifier les goulots d'étranglement :\\n- `%timeit` dans Jupyter,\\n- `cProfile` pour profiler un script complet.",
          "code_exemple": "import cProfile\\ncProfile.run('ma_fonction()')"
        },
        {
          "titre": "Limiter les copies inutiles",
          "contenu": "Copier des objets volumineux consomme de la mémoire. Il est préférable de modifier les données sur place quand c’est possible.",
          "code_exemple": "a = [1, 2, 3]\\nb = a  # pas de copie\\nb[0] = 10  # a est aussi modifié"
        }
      ],
      "qcm": [
        {
          "question": "Quelle méthode permet d’optimiser une boucle classique ?",
          "choix": ["Utiliser `if` au lieu de `for`", "Utiliser une compréhension de liste", "Remplacer `print` par `return`", "Écrire en C"],
          "reponse": "Utiliser une compréhension de liste"
        },
        {
          "question": "Quel module Python mesure précisément le temps d'exécution ?",
          "choix": ["datetime", "profile", "time", "sys"],
          "reponse": "time"
        },
        {
          "question": "Quelle bibliothèque est optimisée pour les calculs sur tableaux ?",
          "choix": ["Pandas", "NumPy", "Seaborn", "SciPy"],
          "reponse": "NumPy"
        }
      ],
      "resume": ""
    },

    {
      "chapitre": "API & Web Scraping",
      "niveau": 9,
      "titre": "Communiquer avec le Web : APIs et extraction de données",
      "sections": [
        {
          "titre": "Qu’est-ce qu’une API ?",
          "contenu": "Une API (Application Programming Interface) permet à un programme de communiquer avec un autre via le web, souvent en envoyant des requêtes HTTP et en recevant des données (souvent au format JSON).",
          "code_exemple": ""
        },
        {
          "titre": "Faire une requête HTTP avec `requests`",
          "contenu": "Le module `requests` permet d'envoyer des requêtes pour interagir avec une API.",
          "code_exemple": "import requests\\nresponse = requests.get('https://api.exemple.com/data')\\ndata = response.json()"
        },
        {
          "titre": "Paramètres et en-têtes dans une requête",
          "contenu": "On peut envoyer des paramètres dans l’URL ou des en-têtes pour l’authentification.",
          "code_exemple": "params = {'ville': 'Paris'}\\nheaders = {'Authorization': 'Token xyz'}\\nrequests.get(url, params=params, headers=headers)"
        },
        {
          "titre": "Qu’est-ce que le web scraping ?",
          "contenu": "Le web scraping consiste à extraire automatiquement des informations depuis une page web (HTML) lorsqu’il n’existe pas d’API.",
          "code_exemple": ""
        },
        {
          "titre": "Récupérer une page web avec `requests`",
          "contenu": "On utilise `requests.get()` pour récupérer le HTML brut d'une page.",
          "code_exemple": "import requests\\nhtml = requests.get('https://example.com').text"
        },
        {
          "titre": "Analyser du HTML avec `BeautifulSoup`",
          "contenu": "`BeautifulSoup` permet de parser du HTML pour accéder à des éléments précis.",
          "code_exemple": "from bs4 import BeautifulSoup\\nsoup = BeautifulSoup(html, 'html.parser')\\ntitres = soup.find_all('h1')"
        },
        {
          "titre": "Extraire des éléments du HTML",
          "contenu": "On peut rechercher des balises par nom, classe, id, ou structure de la page.",
          "code_exemple": "soup.find('p')\\nsoup.find_all('a', class_='lien')\\nsoup.select('div.article > h2')"
        }
      ],
      "qcm": [
        {
          "question": "Quel module Python est utilisé pour faire une requête API ?",
          "choix": ["urllib", "json", "requests", "api"],
          "reponse": "requests"
        },
        {
          "question": "Quelle bibliothèque permet d’analyser du HTML facilement ?",
          "choix": ["re", "htmlparser", "selenium", "BeautifulSoup"],
          "reponse": "BeautifulSoup"
        },
        {
          "question": "Quelle méthode permet de récupérer tout le texte d’un site ?",
          "choix": ["requests.html()", "requests.get().text", "html.get()", "get.requests()"],
          "reponse": "requests.get().text"
        }
      ],
      "resume": ""
    },

    {
      "chapitre": "Machine Learning",
      "niveau": 10,
      "titre": "Premiers modèles avec scikit‑learn",
      "sections": [
        {
          "titre": "Qu’est-ce que le Machine Learning ?",
          "contenu": "Le Machine Learning (apprentissage automatique) est une méthode qui permet à un algorithme d’apprendre à partir de données afin de faire des prédictions ou classifications sans être explicitement programmé.",
          "code_exemple": ""
        },
        {
          "titre": "Types d’apprentissage",
          "contenu": "Il existe plusieurs types d’apprentissage :\\n- Apprentissage supervisé : on connaît les résultats attendus (ex: régression, classification).\\n- Apprentissage non supervisé : on découvre des structures cachées (ex: clustering).\\n- Apprentissage par renforcement : l’algorithme apprend par essais/erreurs.",
          "code_exemple": ""
        },
        {
          "titre": "Pipeline de Machine Learning",
          "contenu": "Un projet ML se compose généralement de plusieurs étapes :\\n1. Chargement et nettoyage des données\\n2. Séparation train/test\\n3. Entraînement du modèle\\n4. Évaluation des performances\\n5. Prédiction et amélioration",
          "code_exemple": ""
        },
        {
          "titre": "Régression linéaire avec scikit-learn",
          "contenu": "Exemple d’entraînement d’un modèle de régression simple avec `scikit-learn`.",
          "code_exemple": "from sklearn.linear_model import LinearRegression\\nmodel = LinearRegression()\\nmodel.fit(X_train, y_train)\\ny_pred = model.predict(X_test)"
        },
        {
          "titre": "Classification avec KNN",
          "contenu": "KNN (k-nearest neighbors) est un algorithme de classification basé sur la proximité des points.",
          "code_exemple": "from sklearn.neighbors import KNeighborsClassifier\\nknn = KNeighborsClassifier(n_neighbors=3)\\nknn.fit(X_train, y_train)\\nknn.predict(X_test)"
        },
        {
          "titre": "Évaluation d’un modèle",
          "contenu": "Pour mesurer la performance d’un modèle, on peut utiliser :\\n- Pour la régression : MSE, R²\\n- Pour la classification : précision, rappel, F1-score",
          "code_exemple": "from sklearn.metrics import accuracy_score\\nprint(accuracy_score(y_test, y_pred))"
        }
      ],
      "qcm": [
        {
          "question": "Quel est le but principal du Machine Learning ?",
          "choix": ["Créer des graphiques", "Manipuler des fichiers", "Faire des prédictions à partir de données", "Coder plus vite"],
          "reponse": "Faire des prédictions à partir de données"
        },
        {
          "question": "Quel module Python est le plus utilisé pour le Machine Learning ?",
          "choix": ["seaborn", "scikit-learn", "numpy", "pytorch"],
          "reponse": "scikit-learn"
        },
        {
          "question": "Quel est un algorithme de classification supervisée ?",
          "choix": ["KMeans", "PCA", "KNN", "LinearRegression"],
          "reponse": "KNN"
        }
      ],
      "resume": ""
    },

    {
      "chapitre": "Deep Learning",
      "niveau": 11,
      "titre": "Réseaux de neurones avec TensorFlow / Keras",
      "sections": [
        {
          "titre": "Qu’est-ce que le Deep Learning ?",
          "contenu": "Le Deep Learning (apprentissage profond) est une branche du Machine Learning qui repose sur l’utilisation de réseaux de neurones à plusieurs couches. Il est particulièrement efficace pour traiter des images, du son ou du langage.",
          "code_exemple": ""
        },
        {
          "titre": "Structure d’un réseau de neurones",
          "contenu": "Un réseau de neurones est composé de :\\n- une couche d’entrée (input layer),\\n- des couches cachées (hidden layers),\\n- une couche de sortie (output layer).\\nChaque neurone applique une fonction d’activation sur une combinaison linéaire de ses entrées.",
          "code_exemple": ""
        },
        {
          "titre": "Bibliothèques pour le Deep Learning",
          "contenu": "Les bibliothèques principales sont :\\n- `TensorFlow` (Google)\\n- `Keras` (haut niveau, souvent avec TensorFlow)\\n- `PyTorch` (Meta/Facebook, très populaire en recherche)",
          "code_exemple": "import tensorflow as tf\\nfrom tensorflow import keras"
        },
        {
          "titre": "Créer un modèle avec Keras",
          "contenu": "Voici un exemple de modèle simple pour la classification :",
          "code_exemple": "model = keras.Sequential([\\n    keras.layers.Dense(128, activation='relu'),\\n    keras.layers.Dense(10, activation='softmax')\\n])"
        },
        {
          "titre": "Compiler et entraîner le modèle",
          "contenu": "Avant l'entraînement, il faut compiler le modèle avec une fonction de perte, un optimiseur et une métrique.",
          "code_exemple": "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\\nmodel.fit(X_train, y_train, epochs=5)"
        },
        {
          "titre": "Évaluer et prédire",
          "contenu": "Une fois entraîné, le modèle peut être évalué sur des données de test ou utilisé pour prédire de nouvelles données.",
          "code_exemple": "test_loss, test_acc = model.evaluate(X_test, y_test)\\npredictions = model.predict(X_test)"
        }
      ],
      "qcm": [
        {
          "question": "Quelle est la principale différence entre Machine Learning et Deep Learning ?",
          "choix": ["Le deep learning utilise plus de mémoire", "Le deep learning utilise des réseaux de neurones profonds", "Le machine learning est plus récent", "Ils sont équivalents"],
          "reponse": "Le deep learning utilise des réseaux de neurones profonds"
        },
        {
          "question": "Quelle bibliothèque est couramment utilisée pour le Deep Learning ?",
          "choix": ["scikit-learn", "matplotlib", "seaborn", "TensorFlow"],
          "reponse": "TensorFlow"
        },
        {
          "question": "Quelle fonction Keras permet d'entraîner un modèle ?",
          "choix": ["model.train()", "model.compile()", "model.evaluate()", "model.fit()"],
          "reponse": "model.fit()"
        }
      ],
      "resume": ""
    }
  ]
}
